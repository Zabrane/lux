Command line options
====================

Normal execution mode for Lux is to execute test suites and most of
the command line options affects the execution in different ways.
There are however a few auxiliary options that can be used to make
Lux perform other tasks.

* --help
* --version
* --reltool
* --xref
* --install
* --make
* --markdown
* --annotate
* --history
* --merge
* --mode
* --doc

Script execution
----------------

    lux [--mode Mode] [ConfigParam]... [File]...

Exit status is 0 if all test cases are successful and 1 otherwise.

See the section [Configuration parameters](#config_params) about
script execution.

Release management
------------------

    lux --help
    lux --version
    lux --reltool [--root_dir RootDir]
    lux --xref
    lux --install [InstallDir] [--root_dir RootDir]
    lux --make
    lux --markdown

**--help**  
Displays a brief list of all command line arguments, as well as a URL
to the full documentation.

**-h**  
A shortcut for `--help`.

**--version**  
Prints out the actual Lux version

**--reltool**  
Starts the graphical tool [Reltool][] which enables inspection of
internal Lux application dependencies. It is disabled in the
standalone installation.

**--xref**  
Perform cross reference checks of Lux itself in order to find calls to
undefined functions.

**--install \[InstallDir\]**  
See [installation](#../INSTALL). Installs the Lux application as a
standalone application in the `InstallDir` directory. `InstallDir`
must exist. If `InstallDir` is omitted only a dry run is performed. A
standalone installation is self-contained and contains a minimal
Erlang runtime system. It is however not neccessary to install Lux as
standalone. If Erlang already is installed on the system, Lux can make
use of that runtime environment. But sometimes it is useful to avoid
that dependency.
    
**--root\_dir `RootDir`**  
Directs [Reltool][] to use an alternate Erlang root directory instead
of the one currently being used. Affects `--install` and `--reltool`.

**--make**  
Performs a simplified build only relying on a pre-installed Erlang/OTP
system. To be used with care on obscure platforms. See
[installation](#../INSTALL).
    
**--markdown**  
Generates documentation for the Lux debugger on [Markdown][] format.
This is used internally by doc/Makefile.
    
Log management
--------------

    lux --annotate LogFile
    lux --merge TargetLogDir [SourceLogFile]...
    lux --history TargetLogDir [SourceLogFile]...

**--annotate LogFile**  
Transforms textual log files into HTML format and annotates Lux script
code with log events. The generated HTML file will get the same name
as `LogFile` but with a `.html` extension added. See also the
[configuration parameter](#config_params) `--html`.

**--merge TargetLogDir [SourceLogFile]...**  
Merges the logs from multiple partial runs. When a test suite takes a
long time to run, it is possible to split it up in multiple runs with
a few test cases in each. When all test cases in the suite has
completed, their logs can me merged. The result will look like the
test suite was run in one go. The original logs will be kept as is and
the new `lux_summary.log.html`log will contain links to the original
logs. For example the original `lux_config.log` files cannot be merged
as the separate test case runs may been run in very different
environments (ex. different Docker containers).

The `--merge` option is much safer than using `--extend_run` as it
enables true parallel runs of the test cases. The `--extend_run` can
only be used when the test cases are run in sequence after each other.

**--history TargetLogDir [SourceLogFile]...**  
Generates an HTML file which summarizes the history of all test runs.
The history file will be generated on the `TargetLogDir` directory and
is named `lux_history.html`. Its behavior can be customized by using
the `--suite`, `--run`, `--revision` and `--hostname`
[configuration parameters](#config_params).

The history file generation is done by analyzing `lux_summary.log`
files. A `SourceLogFile`s may either be an already existing
`lux_history.html` file or a directory. When `SourceLogFile` is a
directory all subdirectories not containing a `lux.skip` file will be
searched for `lux_summary.log` files.

`SourceLogFile` may also be a `lux_history.html` file, in that case
the `lux_summary.log` files are extracted from the history file. This
can be used for the purpose of merging existing history files. The
`SourceLogFile` may either be a local filename or an URL. If it is an
URL both the history file and the summary log files are fetched over
the network. The resulting history file will then contain URL's,
implying that it may relocated without getting dangling links.

The `SourceLogFile` may be prefixed with a suite name, like
`SuitePrefix::SourceLogFile`. I that case the `SuitePrefix` will
override the `--suite` parameter setting from the original run. This
may be useful when a suite has been reused and thus run several
times. For example when there are several versions of the system under
test:

    lux --history . debug::PathToDebugLogDir release::PathToReleaseLogDir
